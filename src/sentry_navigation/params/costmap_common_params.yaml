robot_radius: 0.12 #圆形机器人半径

obstacle_range: 3.0 # 用于障碍物探测，比如: 值为 3.0，意味着检测到距离小于 3 米的障碍物时，就会引入代价地图
raytrace_range: 3.5 # 用于清除障碍物，比如：值为 3.5，意味着清除代价地图中 3.5 米以外的障碍物

track_unknown_space: false #设置为false地图中未知区域被认为自由区域,可以把一些未探索的未知区域也来参与到路径规划

#膨胀半径，扩展在碰撞区域以外的代价区域，使得机器人规划路径避开障碍物
inflation_radius: 0.3
#代价比例系数，越大则代价值越小
cost_scaling_factor: 2.0

#地图类型
map_type: costmap
#导航包所需要的传感器
observation_sources: scan #3dscan
#对传感器的坐标系和数据进行配置。这个也会用于代价地图添加和清除障碍物。例如，你可以用激光雷达传感器用于在代价地图添加障碍物，再添加kinect用于导航和清除障碍物。
scan: {sensor_frame: laser, data_type: LaserScan, topic: scan, marking: true, clearing: true}
# observation_sources: 3dscan
# 3dscan: { sensor_frame: livox_frame, data_type: PointCloud2, topic: livox_pcl_filter, marking: true, clearing: true }